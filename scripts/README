This describes how we tested for positive selection


The dataset contains 2117 orthologous groups from 80 species/strains.

To use everything you will need:

- godon: https://bitbucket.org//Davydov/godon

- guidance2: http://guidance.tau.ac.il/ver2/

- R cran libraries: ape, qvalue, plyr, ggplot2, reshape2, xtable,
  broom, sandwich, lmtest, mblm, car.

- python libraries: dendropy 4, numpy, Biopython

Here is the description of the files:

- guidance.sh was used to align sequences using guidance2.

- filter_seqs.sh is used to remove unreliable regions. WARNING: the
  guidance2 script does not check for the sequence quality properly.
  So you need to do it manually at the moment. You can find bad
  sequences by searchin for *.SeqFiltRemoved with non-zero size.

- rmidn.py removes identical sequences from OG. This makes analysis
  faster. Useful for close species. Use with caution, only if you are
  sure what you are doing.

- tree.sh constructs a phylogenetic tree for an every ortologous group.

- it is important to keep only good orthology calls. To achieve that
  we kept only trees with short branch lengths (total branch length <
  .3, maximum branch len < .1; you can come up with thresholds by
  looking at the distributions). We used R and library ape.

- for statistical binning please consult the manual. We used a
  threshold of 95.

- prep.tree.seq.py is the script which creates data for further
  positive selection analysis. It uses the maximum likelihood tree as
  well as five bootstrap trees.

- bs.sh is a script we used to submit jobs to the cluster. For the
  branch-site model analysis. It's for LSF, but should be easy to
  rewrite to other cluster management systems.

- m8.sh is a script we used to submit jobs to the cluster. For the M8
  model analysis. It's for LSF, but should be easy to rewrite to other
  cluster management systems. For M8 we used M0 trees from the
  branch-site model analysis. We extract them using the following
  bash code:

    cat $f | python -c "import sys, json; print
    json.load(sys.stdin)['globalOptimizations'][0]['finalTree']" >
    ../data.m0tree/${f%.*.*}.M0.nwk

- import_sh.py is used to import json files to python shelve database.

- m8_stat.py is used to export M8 results.

- m8_export_all.py is used to export M8 results with all the
  parameters.

- bs_stat.py is used to export branch-site results.

- concat_nt.py is used to concatenate nucleotide sequences (to produce
  a concatenated tree). You can create a tree using tree.sh.

- root.R performs tree rooting. WARNING: don't use seaview for that as
  it rounds branch lengths, can be an issue for very branches.

- compat_tree.py creates tree and lrt files: bs_branch_lrt.txt
  (likelihood ratio tests for all the genes and associated branches)
  and bs_tree.nwk (a tree with nodes labeled to match
  bs_branch_lrt.txt.

- pltree.R plots trees using results from the branch-site model.

- pr_m8.R exports M8 results.

- gc.py computes GC content.

- tlen.py is used to compute total tree length (sum of branch
  lengths).

- cor.R is used for the correlation analysis.